import ast
import numpy as np
import pandas as pd
import streamlit as st
from streamlit_option_menu import option_menu
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sentence_transformers import SentenceTransformer, util
from queries import sql_query

query_1 = """
SELECT "name", AVG(rating) as average_rating
FROM hotel_reviews hr
GROUP BY "name"
ORDER BY average_rating DESC
LIMIT 5;
"""

query_2 = """
SELECT "name", AVG(rating) as average_rating
FROM hotel_reviews
GROUP BY "name"
ORDER BY average_rating ASC
LIMIT 5;
"""

query_3 = """
SELECT "name", COUNT(*) as review_count
FROM hotel_reviews
GROUP BY "name"
ORDER BY review_count asc
LIMIT 5;
"""

query_4 = """
SELECT zip_code, COUNT(*) as hotel_count
FROM hotel_reviews hr 
GROUP BY zip_code
ORDER BY hotel_count DESC
LIMIT 5;
"""

query_5 = """
SELECT zip_code, COUNT(*) as hotel_count
FROM hotel_reviews hr 
GROUP BY zip_code
ORDER BY hotel_count ASC
LIMIT 5;
"""

PATH1 = os.path.join("artifacts", "hotel-logo.png")
PATH2 =os.path.join("artifacts", "maps.png")
PATH3 = os.path.join("artifacts", "likes.png")
PATH4 = os.path.join("artifacts", "Review_score.png")
PATH5 = os.path.join("artifacts", "average-rating.png")


with st.sidebar:
    st.image(PATH1)
    choice = option_menu(
        menu_title="Final Project",
        options=["Overview", "SQL Queries", "Data Visualization", "Hotel Similarity Search"],
        icons=["house", "map", "book", "list-task", "list"],
        menu_icon="cast",
        default_index=0,
    )

# First Page
if choice == "Overview":

    st.title("Hotel Reviews in Austin")
    st.header("Introduction")
    st.markdown(
        "This project aims to conduct a hotel review vector search engine based on Hotel reviews extracted from Google API and Outscraper. "
        "The projects include the use of Google Cloud Platform, SQL, scraping, and using Streamlit to show results. "
        "The aim of this project is to collect reviews for hotels in the Austin area, then conduct an analysis of these reviews. "
        "This analysis included comparing hotels in Austin by reviews (including the review scores, number of reviews for hotels, and distribution of review scores) "
        "and using the python package 'sentence-transformers' to embed written reviews as vectors. Embedding these vectors allowed us to develop a vector search function capable of identifying hotels where specific keywords (i.e., 'fitness center' or 'laundry service') are frequently mentioned in reviews."
    )

    st.header("Data Source")
    st.subheader("I. Google API ")
    st.markdown(
        "Using the Google Cloud Platform, we generated a valid Google Maps API and retained the API key. "
        "Wrote the mapapi.py file to generate a list of hotel Place IDs using a location search URL. "
        "The resulting list consisted of 60 hotels, due to a limit Google Maps API places on the number of results that can be returned. "
        "Created a CSV with the list of hotels and their corresponding Place ID and zip codes."
    )

    st.subheader("II. Outscraper")
    st.markdown(
        "Using the list of Place IDs generated by mapapi.py to generate an Outscraper query to scrape 200 Google reviews per hotel. "
        "About 45 minutes of processing later, Outscraper generated an XLSX file with columns consisting of hotel name, number of reviews, rating, review text, etc. "
        "We uploaded the file as a CSV to GitHub as Austin_Hotel_reviews_with_LatitudeLongitude_."
    )

    st.header("Data Cleaning Process")
    st.markdown(
        "Using pandas to remove redundant columns from the original CSV file. We cut 26 columns from 47 columns, so 21 columns were left. "
        "Columns that were cut off included 'review_pagination_id,' 'author_image,' and 'review_img_url,' etc. "
        "This was accomplished with dataclean.py and produced the CSV 'cleaned_hotel_data.csv' in the artifacts folder."
    )

    st.header("Data Embedding")
    st.markdown(
        "After the hotel data had been cleaned, we used the python package 'sentence_transformer' to embed the column 'hotel_reviews'. "
        "This package can embed written sentences based on their meaning and store these embeddings as vectors. "
        "We used the model 'all-MiniLM-L6-v2' to embed the reviews as vectors and store the resulting vectors as the column 'embedding'. "
        "The results were stored as the CSV’s 'embedded_hotel_data.csv', which contained headers and 'sql_embedded_hotel_data.csv', which did not contain headers. "
        "(Note: Due to the size of these files, we were not able to upload them to GitHub). We uploaded 'sql_embedded_hotel_data.csv' to Cloud GCP and set up the PostgreSQL database 'hotels' as the table 'hotel_reviews'. "
        "The schema for the table is saved as hotel_data.sql on GitHub, which can be run as a script in SQL prior to uploading the data to PostgreSQL."
    )

    st.header("Limitations")
    st.markdown("Due to how the Google Maps API and Outscraper works, we were only limited to 60 hotels in our analysis and up to only 200 reviews per hotel, so this does not provide a comprehensive search of hotels in the Austin area. Also, since reviews were left by individuals who may have had strong opinions about the hotel (either positive or negative), the vector search may not capture all the services provided by the hotel. An extension to our work here could include reviews from other sites (such as Yelp or Travels.com) or data provided by the hotels themselves (such as advertised services)."


    )


elif choice == "SQL Queries":
    st.header("SQL Queries")

    # Load the SQL queries into a dictionary
    queries = {
        "Question 1: Best-reviewed hotels": query_1,
        "Question 2: Worst-reviewed hotels": query_2,
        "Question 3: Least-reviewed hotels": query_3,
        "Question 4: Top 5 zip codes with most hotel reviews": query_4,
        "Question 5: Top 5 zip codes with least hotel reviews": query_5,
    }

    # Display a dropdown for selecting a query
    selected_query = st.selectbox("Select a question", list(queries.keys()))

    # Retrieve the selected query
    selected_query_text = queries[selected_query]

    # Display the selected query
    st.write(f"Selected Query: {selected_query}")

    # Add a button to execute the query
    if st.button("Run Query"):
        # Establish a database connection
        load_dotenv()
        DATABASE_USERNAME = os.environ["DATABASE_USERNAME"]
        DATABASE_PASSWORD = os.environ["DATABASE_PASSWORD"]
        DATABASE_HOST = os.environ["DATABASE_HOST"]
        DATABASE_PORT = os.environ["DATABASE_PORT"]
        DATABASE_DATABASE = os.environ["DATABASE_DATABASE"]

        SQLALCHEMY_DATABASE_URL = f"postgresql://{DATABASE_USERNAME}:{DATABASE_PASSWORD}@{DATABASE_HOST}:{DATABASE_PORT}/{DATABASE_DATABASE}"

        engine = create_engine(SQLALCHEMY_DATABASE_URL)
        connection = engine.connect()

        # Execute the selected query
        result = connection.execute(selected_query_text)

        # Display the result as a DataFrame
        result_df = pd.DataFrame(result, columns=result.keys())
        st.dataframe(result_df)

        # Close the database connection
        connection.close()

elif choice == "Hotel Similarity Search":
    st.header("Hotel Similarity Search")

    # Input the user's question
    question = st.text_area("Enter your query for hotel similarity search:")

    # Add a button to execute the similarity search
    if st.button("Run Similarity Search"):
        if question:
            # Execute the similarity search and display the result
            result_df = sql_query(question)
            st.table(result_df)
        else:
            st.warning("Please enter a query for hotel similarity search.")

elif choice == "Data Visualization":
    st.title("Data Visualization")
    st.markdown("We used Tableau to create visualizations. Initially, an interactive dashboard was planned to pair up with Streamlit, but more time may be required as the Streamlit interface with Tableau is different.")
    
    st.subheader("Locate Hotels Based on Zipcode and Rating:")
    st.image(PATH2)
    tableau_public_link = "https://public.tableau.com/app/profile/vimoli.mehta/viz/HotelsinAustin/LocatingHotels?publish=yes"
    st.markdown(f"Geographical Map({tableau_public_link}): ")
    st.markdown("As we can see, out of the 60 hotels included, approximately 25 are very close to the I-35 highway. These hotels generally have an average rating ranging from 4 to 4.4.")
   
    st.subheader("Top 10 Hotels with Maximum Likes:")
    st.image(PATH3)
    st.markdown("This bar chart shows the Top 10 Hotels that have received the maximum likes on the reviews posted on Google.")

    st.subheader("Discrepancies observed in the data")
    st.image(PATH4)
    st.markdown("Here, we plotted the Top 10 hotels which have received the highest number of ‘1’ rating. We were surprised to find out that when we plotted the rating score of ‘5’ on the same graph we had some great outliers like - Hilton Austin, Embassy Suites and Holiday Inn Austin-Town Lake.")

    st.subheader("Average Rating of Hotel Distribution")
    st.image(PATH5)
    st.markdown("We also wanted to see the range of our rating values we calculated from the 60 hotels. The range is pretty much on the higher end where we have more people submitting positive responses.")